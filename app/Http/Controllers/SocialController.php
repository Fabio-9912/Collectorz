<?php

namespace App\Http\Controllers;

use App\Models\User;
use App\Providers\RouteServiceProvider;
use Exception;
use Illuminate\Http\RedirectResponse;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Str;
use Laravel\Socialite\Facades\Socialite;

class SocialController extends Controller
{
    /**
     * @return RedirectResponse
     */
    public function redirectToFacebook(): RedirectResponse
    {
        return Socialite::driver('facebook')->redirect();
    }

    /**
     * @return RedirectResponse
     */
    public function handleFacebookCallback(): RedirectResponse
    {
        $user = Socialite::driver('facebook')->stateless()->user();
        $existingUser = User::where('email', $user->email)->first();
        
        if ($existingUser) {
            // Log in the existing user.
            $existingUser->update([
                'facebook_id' => $user->id
            ]);
            auth()->login($existingUser, true);
        } else {
            dd($user->picture);
            // Create a new user.
            $newUser = new User();
            $newUser->name = $user->name;
            $newUser->email = $user->email;
            $newUser->facebook_id = $user->id;
            $newUser->password = bcrypt(request(Str::random())); // Set some random password
            $newUser->save();

            // Log in the new user.
            auth()->login($newUser, true);
        }

        // Redirect to url as requested by user, if empty use /dashboard page as generated by Jetstream
        return redirect()->intended('/');
    }


    // Login Google
    public function redirectToGoogle()
    {
        return Socialite::driver('google')->redirect();
    }


    public function handleGoogleCallback()
    {
        $googleUser = Socialite::driver('google')->stateless()->user();
        $user = User::where('email', $googleUser->email)->first();
        if (!$user) {
            $user = User::create(['name' => $googleUser->name, 'email' => $googleUser->email, 'password' => Hash::make(rand(100000, 999999)), 'user_photo' => $googleUser->getAvatar()]);
        }
        if ($user->user_photo == null) {
            $user->update(['user_photo' => $googleUser->getAvatar()]);
        }

        Auth::login($user);

        return redirect(route('announcements.create'));
    }
      
    public function linkedinRedirect()
    {
        return Socialite::driver('linkedin')->redirect();
    }

    public function linkedinCallback()
    {
        $linkedinUser = Socialite::driver('linkedin')->stateless()->user();
        $user = User::where('email', $linkedinUser->email)->first();
        if (!$user) {
            $user = User::create(['name' => $linkedinUser->name, 'email' => $linkedinUser->email, 'password' => Hash::make(rand(100000, 999999))]);
        }

        Auth::login($user);

        return redirect(route('announcements.create'));
    }
}